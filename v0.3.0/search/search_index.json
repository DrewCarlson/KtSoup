{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KtSoup","text":"<p>A Kotlin Multiplatform HTML5 parsing library built on Lexbor, Jsoup, and node-html-parser.</p> <p>API Docs</p>"},{"location":"#checkout-the-getting-started-guide","title":"Checkout the Getting Started guide.","text":"<pre><code>val html = \"\"\"\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;div id=\"test\" class=\"test\"&gt;Hello World&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\nKtSoupParser.parse(html).use { document -&gt;\nval div = document.querySelector(\"#test\")\nprintln(div.textContent()) // Hello World\nprintln(div.html())        // &lt;div id=\"test\" class=\"test\"&gt;Hello World&lt;/div&gt;\nprintln(div.className())   // test\n}\n</code></pre>"},{"location":"1-getting-started/","title":"Introduction","text":"<p>The entry point for KtSoup is the <code>KtSoupParser</code> object, it provides all methods for producing <code>KtSoupDocuments</code> from various HTML document sources.</p>"},{"location":"1-getting-started/#parsing","title":"Parsing","text":"<p>KtSoup provides various methods for parsing HTML documents depending on your use-case. Regardless of the document source, a <code>KtSoupDocument</code> will be returned to traverse the DOM.</p>"},{"location":"1-getting-started/#string","title":"String","text":"<pre><code>val html = \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, KtSoup!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\"\nval document: KtSoupDocument = KtSoupParser.parse(html)\n</code></pre>"},{"location":"1-getting-started/#url","title":"URL","text":"<p>When using the <code>ktsoup-ktor</code> module, you'll have access to the <code>parseRemote(urlString: String)</code> function.</p> <pre><code>val document: KtSoupDocument = KtSoupParser.parseRemote(\"https://duckduckgo.com\")\n</code></pre>"},{"location":"1-getting-started/#file","title":"File","text":"<p>When using the <code>ktsoup-fs</code> module, you'll have access to the <code>parseFile(path: String)</code> function. Note that all targets except Browser Javascript are supported.</p> <pre><code>val document: KtSoupDocument = KtSoupParser.parseFile(\"/path/to/document.html\")\n</code></pre>"},{"location":"1-getting-started/#document-usage","title":"Document Usage","text":"<p>Once you've obtained a <code>KtSoupDocument</code>, you can use and pass it around including any <code>KtSoupElements</code> obtained with it. When you are done with the document it is important to call <code>close()</code> on it to free all resources.</p> <pre><code>val document: KtSoupDocument = KtSoupParser.parse(html)\n// ... Select some elements and read data ...\ndocument.close()\n// Document is no longer usable and should be discarded.\n</code></pre> <p>For simplicity the <code>use { document -&gt; }</code> method is provided to automatically free its resources when completed.</p> <pre><code>val document: KtSoupDocument = KtSoupParser.parse(html)\nval title = document.use { document -&gt;\ndocument.title()\n}\n</code></pre>"},{"location":"1-getting-started/#extracting-data","title":"Extracting Data","text":""},{"location":"1-getting-started/#document","title":"Document","text":"<p>The <code>KtSoupDocument</code> object provides a few specialized functions to simplify accessing Document level details.</p>"},{"location":"1-getting-started/#head","title":"Head","text":"<p>You can quickly access the <code>&lt;head&gt;</code> element using <code>head()</code>.</p> <pre><code>val head: KtSoupElement? = document.head()\n</code></pre>"},{"location":"1-getting-started/#body","title":"Body","text":"<p>Similar to the document head, the <code>&lt;body&gt;</code> element can be accessed with <code>body()</code></p> <pre><code>val body: KtSoupDocument? = document.body()\n</code></pre>"},{"location":"1-getting-started/#title","title":"Title","text":"<p>If the document provides a <code>&lt;title&gt;</code>, it can be accessed with <code>title()</code>. Note that if a title is not provided, an empty string will be returned.</p> <pre><code>val title: String = document.title()\n</code></pre>"},{"location":"1-getting-started/#selecting-elements","title":"Selecting Elements","text":"<p>KtSoup provides CSS query selectors and standard DOM selectors to quickly find single elements or list of matching elements.</p>"},{"location":"1-getting-started/#css-selectors","title":"CSS Selectors","text":"<p>CSS Selector APIs are available on both <code>KtSoupDocument</code>s and <code>KtSoupElement</code>s.</p>"},{"location":"1-getting-started/#single-element","title":"Single Element","text":"<pre><code>val div: KtSoupElement? = document.querySelector(\"div#my-div\")\nval childLink: KtSoupElement? = div?.querySelector(\"a.my-link\")\n</code></pre>"},{"location":"1-getting-started/#element-lists","title":"Element Lists","text":"<pre><code>val divs: List&lt;KtSoupElement&gt; = document.querySelectorAll(\"div\")\nval childLinks: List&lt;KtSoupElement&gt; = divs.flatMap { it.querySelectorAll(\"a\") }\n</code></pre>"},{"location":"1-getting-started/#dom-selectors","title":"DOM Selectors","text":"<p>The more basic DOM element selection APIs are available on <code>KtSoupDocument</code>s.</p> <pre><code>val div: KtSoupElement? = document.getElementById(\"my-div-id\")\n</code></pre> <pre><code>val divs: List&lt;KtSoupElement&gt; = document.getElementsByClass(\"my-div-class\")\n</code></pre> <pre><code>val divs: List&lt;KtSoupElement&gt; = document.getElementsByTagName(\"div\")\n</code></pre>"},{"location":"1-getting-started/#read-node-data","title":"Read Node Data","text":""},{"location":"1-getting-started/#element-attributes","title":"Element Attributes","text":"<pre><code>val tagName: String = element.tagName()\n// Attribute convenience functions\nval elementId: String? = element.id()\nval className: String? = element.className()\n// Direct attribute value access\nval customAttr: String? = element.attr(\"customAttr\")\n// Read all attributes\nval allAttrs: Map&lt;String, String&gt; = element.attrs()\n</code></pre>"},{"location":"1-getting-started/#modifying-data","title":"Modifying Data","text":"<p>NOTE: Modification APIs are not currently implemented.</p>"},{"location":"1-getting-started/#examples","title":"Examples","text":"<p>For a complete example, see Scraping Example.</p>"},{"location":"2-download/","title":"Download","text":""},{"location":"2-download/#repository","title":"Repository","text":"<p>Releases are published to Maven Central and snapshots are published to Sonatype OSS. Make sure the required repository is in your build script:</p> <pre><code>repositories {\nmavenCentral()\n// Or snapshots\nmaven(\"https://s01.oss.sonatype.org/content/repositories/snapshots/\")\n}\n</code></pre>"},{"location":"2-download/#kotlin-gradle-script","title":"Kotlin Gradle Script","text":"<pre><code>dependencies {\nimplementation(\"org.drewcarlson:ktsoup-core:0.3.0\")\nimplementation(\"org.drewcarlson:ktsoup-fs:0.3.0\")\nimplementation(\"org.drewcarlson:ktsoup-ktor:0.3.0\")\n}\n</code></pre>"},{"location":"2-download/#version-catalog-toml","title":"Version Catalog Toml","text":"<pre><code>[versions]\nktsoup = \"0.3.0\"\n[libraries]\nktsoup-core = { module = \"org.drewcarlson:ktsoup-core\", version.ref = \"ktsoup\" }\nktsoup-fs = { module = \"org.drewcarlson:ktsoup-fs\", version.ref = \"ktsoup\" }\nktsoup-ktor = { module = \"org.drewcarlson:ktsoup-ktor\", version.ref = \"ktsoup\" }\n</code></pre>"},{"location":"3-scraping-example/","title":"Scraping Example","text":"<p>Here is a complete example of scraping information from a product web page.</p>"},{"location":"3-scraping-example/#html","title":"HTML","text":"<p>Let's consider the following well-formed HTML representing an e-commerce item page.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Product Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"product-info\"&gt;\n&lt;h1 id=\"product-name\"&gt;Cool Product&lt;/h1&gt;\n&lt;p id=\"product-sku\"&gt;SKU12345&lt;/p&gt;\n&lt;p id=\"product-price\"&gt;$199.99&lt;/p&gt;\n&lt;p id=\"product-quantity\"&gt;5 in stock&lt;/p&gt;\n&lt;img id=\"product-image\" src=\"image_url.jpg\"&gt;\n&lt;p id=\"product-description\"&gt;This is a cool product!&lt;/p&gt;\n&lt;p id=\"product-manufacturer\"&gt;Manufacturer: Cool Products Inc.&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=\"related-products\"&gt;\n&lt;div class=\"product\"&gt;\n&lt;h2 class=\"product-name\"&gt;Related Product 1&lt;/h2&gt;\n&lt;p class=\"product-sku\"&gt;SKU67890&lt;/p&gt;\n&lt;p class=\"product-price\"&gt;$149.99&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"product\"&gt;\n&lt;h2 class=\"product-name\"&gt;Related Product 2&lt;/h2&gt;\n&lt;p class=\"product-sku\"&gt;SKU11223&lt;/p&gt;\n&lt;p class=\"product-price\"&gt;$99.99&lt;/p&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"3-scraping-example/#setup","title":"Setup","text":"<p>First it's a good practice to create models to represent the data we want to extract.</p> <pre><code>data class Product(\nval name: String,\nval sku: String,\nval price: String,\nval quantity: String,\nval description: String,\nval imageUrl: String,\nval manufacturer: String,\nval relatedProducts: List&lt;RelatedProduct&gt;\n)\ndata class RelatedProduct(\nval name: String,\nval sku: String,\nval price: String\n)\n</code></pre>"},{"location":"3-scraping-example/#scraping","title":"Scraping","text":"<p>Next call <code>parse()</code> with the HTML document or use <code>parseRemote(url)</code> to get a <code>KtSoupDocument</code>. With the document in hand, query all the desired elements and extract the relevant text content.</p> <pre><code>val product = KtSoupParser.parse(html).use { doc -&gt;\nval relatedProducts = doc.querySelectorAll(\"#related-products .product\").map { product -&gt;\nRelatedProduct(\nname = product.querySelector(\".product-name\")?.textContent().orEmpty(), sku = product.querySelector(\".product-sku\")?.textContent().orEmpty(), price = product.querySelector(\".product-price\")?.textContent().orEmpty(),\n)\n}\nProduct(\nname = doc.getElementById(\"product-name\")?.textContent().orEmpty(),\nsku = doc.getElementById(\"product-sku\")?.textContent().orEmpty(),\nprice = doc.getElementById(\"product-price\")?.textContent().orEmpty(),\nquantity = doc.getElementById(\"product-quantity\")?.textContent().orEmpty(),\ndescription = doc.getElementById(\"product-description\")?.textContent().orEmpty(),\nimageUrl = doc.getElementById(\"product-image\")?.attr(\"src\").orEmpty(),\nmanufacturer = doc.getElementById(\"product-manufacturer\")?.textContent().orEmpty(),\nrelatedProducts = relatedProducts\n)\n}\n</code></pre>"},{"location":"3-scraping-example/#done","title":"Done!","text":"<p>That's all it takes to scrape the information we wanted! We can print the <code>product</code> to verify we've got all the desired information.</p> <pre><code>Product(\n    name=Cool Product,\n    sku=SKU12345,\n    price=$199.99,\n    quantity=5 in stock,\n    description=This is a cool product!,\n    imageUrl=image_url.jpg,\n    manufacturer=Manufacturer: Cool Products Inc.,\n    relatedProducts=[\n        RelatedProduct(name=Related Product 1, sku=SKU67890, price=$149.99),\n        RelatedProduct(name=Related Product 2, sku=SKU11223, price=$99.99)\n    ]\n)\n</code></pre>"},{"location":"development/building/","title":"Building","text":""},{"location":"development/building/#setup","title":"Setup","text":"<p>To build from source, checkout the repo using:</p> <pre><code>git clone --recurse-submodules https://github.com/DrewCarlson/KtSoup.git\n</code></pre> <p>Note that <code>lexbor</code> is a required submodule, if you do not checkout with <code>--recurse-submodules</code> you must run:</p> <pre><code>git submodule update --init --recursive\n</code></pre>"},{"location":"development/building/#lexbor","title":"Lexbor","text":"<p>For native targets, a static build of Lexbor is used. Pre-compiled artifacts are available in Github at tags prefixed with <code>lexbor-vX.X.X</code>.</p> <p>The current version is <code>lexbor-v2.2.0</code>.</p> <p>Normally when running the project locally, the required artifacts are downloaded automatically and placed into the <code>lexbor-bin</code> folder at the root of the project.</p> <p>If you would like to build it yourself, the <code>.github/workflows/build-lexbor.yml</code> workflow provides all the details to make use of the <code>cmake-files</code> in this repository for cross-compilation. When you've created your build, place it in the <code>lexbor-bin/&lt;Kotlin Target&gt;/</code> folder and build as usual.</p>"},{"location":"development/documentation/","title":"Documentation","text":"<p>Documentation is created with MkDocs using Material for MkDocs. MkDocs is configured with <code>mkdocs.yml</code> and documentation source is stored in the <code>docs</code> folder.</p>"},{"location":"development/documentation/#install-python","title":"Install Python","text":"<p>Download and install the latest version of Python.</p> macOS Windows"},{"location":"development/documentation/#macos","title":"macOS","text":"<p>Using Homebrew</p> <pre><code>brew install python\n</code></pre>"},{"location":"development/documentation/#windows","title":"Windows","text":"<p>Download and install the recommended version from python.org.</p> <p>Or with Chocolatey</p> <pre><code>choco install python\n</code></pre>"},{"location":"development/documentation/#install-mkdocs-and-plugins","title":"Install MkDocs and plugins","text":"<p>Open a new Terminal or Command Prompt window.</p> <pre><code>pip install mkdocs mkdocs-material mkdocs-markdownextradata-plugin\n</code></pre> <p>For more information see the MkDocs Installation Guide and the Material for MkDocs Installation Guide.</p>"},{"location":"development/documentation/#writing-documentation","title":"Writing Documentation","text":"<p>Documentation source files are written in Markdown. For navigation and advanced formatting features, see the MkDocs Writing your docs guide and Material for MkDocs Reference.</p> Variables <p>Some dynamic variables are made available, they can be used with the <code>{{ name }}</code> syntax. Below are the available variables.</p> Name Value project The project name for the repository version The current release version, for example <code>2.3.5</code> (No <code>v</code> prefix)"},{"location":"development/documentation/#view-docs-locally","title":"View docs locally","text":"<p>To view the docs locally, open a terminal or command prompt and cd into your <code>KtSoup</code> folder then run</p> <pre><code>mkdocs serve\n</code></pre> <p>Your changes will be served at http://127.0.0.1:8000. After saving changes, the webpage will reload automatically.</p>"},{"location":"development/documentation/#deployment","title":"Deployment","text":"<p>Changes are deployed automatically for tagged releases.</p>"}]}